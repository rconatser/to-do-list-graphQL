/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as prisma from "@prisma/client"



declare global {
	interface NexusGenCustomOutputProperties<TypeName extends string> {
		crud: NexusPrisma<TypeName, 'crud'>
		model: NexusPrisma<TypeName, 'model'>
	}
}

declare global {
	interface NexusGen extends NexusGenTypes { }
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
	Task: prisma.Task;
	Mutation: {};
	Query: {};
	String: string;
	Int: number;
	Float: number;
	Boolean: boolean;
	ID: string;
	DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
	TaskWhereUniqueInput: NexusGenInputs['TaskWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
	Task: { // field return type
		title: string; // String!
		createdAt: any; // DateTime!
		content: string; // String!
		dueDate: string; // String!
		id: string; // String!
		priority: string; // String!
		tags: string; // String!
		updatedAt: any; // DateTime!
	}
	Mutation: {
		createTask: NexusGenRootTypes['Task']; // Task!
		deleteOneTask: NexusGenRootTypes['Task'] | null; // Task
		updateTask: NexusGenRootTypes['Task']; // Task!
	}
	Query: { // field return type
		Task: NexusGenRootTypes['Task'] | null; // Task
		Tasks: NexusGenRootTypes['Task'][]; // [Task!]!
	}
}

export interface NexusGenArgTypes {
	Mutation: {
		createTask: { // args
			title: string; // String!
			content?: string | null; // String
			priority?: string | null; // String
			dueDate: string; // String!
			tags?: string | null; // String
		}
		deleteOneTask: { // args
			where: NexusGenInputs['TaskWhereUniqueInput']; // CourseWhereUniqueInput!
		}
		updateTask: { // args
			title?: string | null; // String
			content?: string | null; // String
			dueDate?: string | null; // String
			id?: string | null; // ID
			priority?: string | null; // String
			tags?: string | null; // String
		}
	}
	Query: {
		Task: { // args
			id?: string|null; // ID
		}
		Tasks: { // args
			searchString?: string|null; // String
		}
	}
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields { }

export type NexusGenObjectNames="Task"|"Query";

export type NexusGenInputNames=never;

export type NexusGenEnumNames=never;

export type NexusGenInterfaceNames=never;

export type NexusGenScalarNames="Boolean"|"DateTime"|"Float"|"ID"|"Int"|"String";

export type NexusGenUnionNames=never;

export interface NexusGenTypes {
	context: Context.Context;
	inputTypes: NexusGenInputs;
	rootTypes: NexusGenRootTypes;
	argTypes: NexusGenArgTypes;
	fieldTypes: NexusGenFieldTypes;
	allTypes: NexusGenAllTypes;
	inheritedFields: NexusGenInheritedFields;
	objectNames: NexusGenObjectNames;
	inputNames: NexusGenInputNames;
	enumNames: NexusGenEnumNames;
	interfaceNames: NexusGenInterfaceNames;
	scalarNames: NexusGenScalarNames;
	unionNames: NexusGenUnionNames;
	allInputTypes: NexusGenTypes['inputNames']|NexusGenTypes['enumNames']|NexusGenTypes['scalarNames'];
	allOutputTypes: NexusGenTypes['objectNames']|NexusGenTypes['enumNames']|NexusGenTypes['unionNames']|NexusGenTypes['interfaceNames']|NexusGenTypes['scalarNames'];
	allNamedTypes: NexusGenTypes['allInputTypes']|NexusGenTypes['allOutputTypes']
	abstractTypes: NexusGenTypes['interfaceNames']|NexusGenTypes['unionNames'];
	abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
	interface NexusGenPluginTypeConfig<TypeName extends string> {
	}
	interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
	}
	interface NexusGenPluginSchemaConfig {
	}
}